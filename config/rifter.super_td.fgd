
@BaseClass = BaseProperties_rifter_super_td
[
	parentname(target_destination) [ group="Hierarchy" ] : "Parent" : : "The name of this entity's parent in the movement hierarchy. Entities with parents move with their parent."
	parentAttachmentName(parentAttachment) [ group="Hierarchy" ] : "Parent Model Bone/Attachment Name" : : "The name of the bone or attachment to attach to on the entity's parent in the movement hierarchy. Use !bonemerge to use bone-merge style attachment."

	useLocalOffset(boolean) [ group="Hierarchy" ] : "Use Model Attachment offsets" : 0 : "Whether to respect the specified local offset when doing the initial hierarchical attachment to its parent."
	local.origin(vector) [ group="Hierarchy" ] : "Model Attachment position offset" : : "Offset in the local space of the parent model's attachment/bone to use in hierarchy. Not used if you are not using parent attachment."
	local.angles(angle) [ group="Hierarchy" ] : "Model Attachment angular offset" : : "Angular offset in the local space of the parent model's attachment/bone to use in hierarchy. Not used if you are not using parent attachment."
	local.scales(vector) [ group="Hierarchy" ] : "Model Attachment scale" : : "Scale in the local space of the parent model's attachment/bone to use in hierarchy. Not used if you are not using parent attachment."

	targetname(target_source) : "Name" : : "The name that other entities refer to this entity by."
	tags(tags) : "Tags" : "" : "A list of general purpose tags for this entity, for interactions with other entities such as triggers."
]

//
// CastleEntity
//
@PointClass base(BaseProperties_rifter_super_td) editormodel( "models/towers/castle.vmdl" ) 
metadata
{
	entity_tool_name = "Castle Base"
	entity_tool_group = "Super TD"
	entity_tool_tip = "Defines a point where the castle will spawn"
}
= info_supertd_castle : ""
[
	castleteam(choices) : "Team Castle" : 0 : "Which team does this castle belong to" =
	[
		0 : "Unknown"
		1 : "Blue"
		2 : "Red"
	]
]

//
// CompSpawn
//
@PointClass base(BaseProperties_rifter_super_td) editormodel( "models/editor/playerstart.vmdl" ) 
metadata
{
	entity_tool_name = "Competitive Spawnpoint"
	entity_tool_group = "Super TD"
	entity_tool_tip = "Defines the spawnpoint for competitive play"
}
= info_supertd_competitive_spawn : ""
[
]

//
// DifficultySetter
//
@PointClass base(BaseProperties_rifter_super_td) tags( SupportsSolids, Logic ) 
metadata
{
	entity_tool_name = "Difficulty Setter"
	entity_tool_group = "Super TD"
	entity_tool_tip = "Sets the difficulty"
}
= supertd_difficulty_setter : ""
[
	difficulty(choices) : "Difficulty" : 0 : "What difficulty should be set to" =
	[
		0 : "Easy"
		1 : "Medium"
		2 : "Hard"
		3 : "Impossible"
	]
]

//
// HostileSpawner
//
@PointClass base(BaseProperties_rifter_super_td) editormodel( "models/citizen/citizen.vmdl" ) 
metadata
{
	entity_tool_name = "NPC Spawnpoint"
	entity_tool_group = "Super TD"
	entity_tool_tip = "Defines a point where NPCs can spawn"
}
= info_supertd_npc_spawner : ""
[
	competitivespawner(boolean) : "Is Competitive Spawner" : 0 : ""
]

//
// TowerBlocker
//
@SolidClass base(BaseProperties_rifter_super_td) tags( SupportsSolids, Dynamic ) 
metadata
{
	entity_tool_name = "Tower Blocker"
	entity_tool_group = "Super TD"
	entity_tool_tip = "Prevents spawning of towers"
}
= supertd_tower_blocker : ""
[
	rendercolor(color255) { alpha = true } : "Color (R G B A)" : "255 255 255 255" : "The color tint of this entity."
	enabled(boolean) : "Enabled" : 1 : "Whether this func_brush is visible/active at all"
	solid(boolean) : "Solid" : 1 : "Whether this func_brush has collisions"
	health(float) : "Health" : 0 : "If set to above 0, the entity will have this much health on spawn and will be breakable."
	enable_shadows(boolean) { group = "Rendering" } : "Shadow Casting" : 1 : "Whether this entity should cast shadows or not"

	input Break(void) : "Causes this prop to break, regardless if it is actually breakable or not. (i.e. ignores health and whether the model has gibs)"
	input DisableSolid(void) : "Make this func_brush non solid"
	input EnableSolid(void) : "Make this func_brush solid"
	input ToggleSolid(void) : "Toggle solidity of this func_brush"
	input Enable(void) : "Enable this func_brush, making it visible"
	input Disable(void) : "Disable this func_brush, making it invisible and non solid"
	input Toggle(void) : "Toggle this func_brush"
	input SetColor(string) : "Sets the color of this entity. Format is '255 255 255 255'."

	output OnDamaged(void) : "Fired when the entity gets damaged, even if it is unbreakable."
	output OnBreak(void) : "Fired when the entity gets destroyed."
]

//
// WaveSetup
//
@PointClass base(BaseProperties_rifter_super_td) tags( SupportsSolids, Logic ) 
metadata
{
	entity_tool_name = "Wave Setup"
	entity_tool_group = "Super TD"
	entity_tool_tip = "Sets up the wave"
}
= supertd_wave_setup : ""
[
	waveorder(integer) : "Wave Order" : 0 : "What order should this go"
	spawncount(integer) : "Spawn Count" : 0 : "How many times should this spawn for that NPC"
	npctospawn(choices) : "Npcs To Spawn" : 0 : "What NPC should this spawn" =
	[
		0 : "Unspecified"
		1 : "Peasant"
		2 : "Zombie"
		3 : "Brute"
		4 : "Rebel"
		5 : "Rioter"
		6 : "Voidling"
		7 : "Hidden"
		8 : "Zombie Boss"
		9 : "Void King"
	]
	npcspawnrate(float) : "NPC Spawn Rate" :  : "How fast should this NPC spawn"
]

